{
	,    ,,, ,,,,
	"test": "test",
	"test": "test",
	"test": "test"
	"test": "test",
	"test": "test",, ,,, ,,,
	"test": "test",
	"test": "test,
	"test": "test",
	"test": "test"
		
}

}
}
mM
.keyword
 keyword 
..%.te.xt.l
${0:/upcase}
begin
{
	"test": "test",
	"test": "test",
	"test": "test",
	"test": "test",
	"test": [ "": "" ],
	"test": { "":,"": {  } },
	"test": "test",
	"test": "test"
}
ab
###
[123456789abcdefghijklmnop::]
{}
[]
°
abcde
E
^
:
#
]
[
:]
a]
E]
]]
[[
[]
][
end
[ "": {d "": {s "" }}d ]

test
}d ]

[ "": { "":"" } ]

{
	]"test": "test",
	"test"]: "test",
	"test":] "test",
	"test": "test"],
	"test": "test",]
	"test": "test"
}
	"test": "test",
	"test": "test",
	"test": "test",
	"test": "test"
}
{
	"test": []"test":"test"],
	"test": ["test"]:"test"],
	"test": ["test":]"test"],
	"test": ["test":"test"],
	"test": ["test":"test"],
	"test": ["test":"test"]
}
}
{}
{,}
{"}
{""}
{"":}
{"":"}
{"":""}
{,"":""}
{"",:""}
{"":,""}
{"":"",}
{"":"","":""}

{
	,
}




abc
d
e
ABC
_
:
^
|
[
]
#
a]
:]
;]
]]
[]
][
\\
\:]
\]






{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.redcmd.syntax.lag",
	"injections": {
		"R:source.redcmd.syntax.lag - invalid - string - variable - comment - regex - markup - meta.embedded - whitespace": {
			"comment": "How to inject into everything that doesn't have a scope-name? without having to specify every single scope-name?",
			"patterns": [
				{ "include": "#invalid-brackets-commas" },
				{ "include": "#invalid" }
			]
		},
		"ab": {
			"patterns": [
				{ "include": "#ab" },
				{ "include": "#ab-" },
				{ "include": "#cd" },
				{ "include": "#ef" }
			]
		},
		"L:cd": {
			"patterns": [
				{ "include": "#abs" },
				{ "include": "#cds" },
				{ "include": "#cd-" },
				{ "include": "#efs" }
			]
		}
	},
	"patterns": [
		{
			"matchs": "(?x)   [[:123456789abcdefghijklmnopqrst:]",
			"names": "comment strong regex"
		},
		{ "include": "#json" },
		{ "include2": "#invalid2" },
		{ "include2": "#ab" },
		{ "include2": "#cd" },
		{ "include2": "#ef" },
		{
			"begin2": "begin",
			"end2": "end",
			"contentName2": "meta.embedded.block.ab",
			"patterns2": [ { "include": "source.redcmd.syntax.ab" } ]
		}
	],
	"repository": {
		"ab": {
			"begin": "{",
			"end": "}",
			"captures": { "0": { "name": "support.type strong" } },
			"contentName": "ab"
		},
		"ab-": {
			"match": "#",
			"name": "support.type strong"
		},
		"cd": {
			"begin": "\\[",
			"end": "]",
			"captures": { "0": { "name": "keyword strong" } },
			"contentName": "cd"
		},
		"cd-": {
			"match": "#",
			"name": "keyword strong"
		},
		"ef": {
			"begin": "\\(",
			"end": "\\)",
			"captures": { "0": { "name": "variable strong" } }
		},
		"test": {
			"match": "(a\\Kax)",
			"name": "keyword.control strong.regex",
			"captures": {
				"1": { "patterns": [ { "include": "#test" } ] }
			}
		},
		"json": {
			"comment": "{ ... }",
			"begin": "^\\s*{",
			"end": "}\\s*$",
			"beginCaptures": { "0": { "name": "markup.underline" } },
			"endCaptures": { "0": { "name": "markup.underline" } },
			"patterns": [
				{
					"begin": "\\G|(?=,)",
					"end": "(?!\\G)(?=[]},])|(?!\\G)(?<=[]}\"]|true|false|null|\\d)",
					"patterns": [
						{ "include": "#json-item" }
					]
				}
			]
		},
		"json-item": {
			"comment": "\"...\": ...",
			"begin": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
			"ends": "\\G(?=([]},]))|(?!\\G)(?<=[]}\"]|true|false|null|\\d)",
			"end": "\\G(?=([]},]))|(?=[]},])|(?!\\G)(?<=[]}\"]|true|false|null|\\d)",
			"beginCaptures": { "0": { "name": "variable" } },
			"endCaptures": { "1": { "name": "comment markup.strikethrough" } },
			"patterns": [
				{
					"begin": ":",
					"end": "\\G(?=([]},]))|(?=[]},])|(?<=[]}\"]|true|false|null|\\d)",
					"ends": "\\G(?=([]},]))|(?<=[]}\"]|true|false|null|\\d)",
					"beginCaptures": { "0": { "name": "markup.underline" } },
					"endCaptures": { "1": { "name": "comment markup.strikethrough" } },
					"patterns": [
						{ "include": "#json-dictionarys" },
						{ "include": "#json-arrays" },
						{ "include": "#json-value" }
					]
				}
			]
		},
		"json-dictionary": {
			"comment": "{ ... }",
			"begin": "{",
			"end": "}",
			"beginCaptures": { "0": { "name": "markup.underline" } },
			"endCaptures": { "0": { "name": "markup.underline" } },
			"patterns": [
				{ "include": "#json-item" }
			]
		},
		"json-array": {
			"comment": "[ ... ]",
			"begin": "\\[",
			"end": "]",
			"beginCaptures": { "0": { "name": "markup.underline" } },
			"endCaptures": { "0": { "name": "markup.underline" } },
			"patterns": [
				{ "include": "#json-dictionary" },
				{ "include": "#json-array" },
				{ "include": "#json-value" }
			]
		},
		"json-value": {
			"patterns": [
				{
					"comment": "\"...\"",
					"match": "\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
					"name": "string.tm",
					"captures": {
						"1": {
							"name": "string.tm",
							"patterns": [
								{
									"match": "\\\\[\"\\\\/bfnrt]",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\u\\h{4}",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\.?",
									"name": "invalid.tm"
								}
							]
						}
					}
				},
				{
					"match": "true|false|null",
					"name": "keyword.control.tm"
				},
				{
					"match": "-?\\d+",
					"name": "constant.numeric.tm"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"comment": "C styled comments are not allowed: //  /* */ ",
					"match": "/[/*][^]},\"]*",
					"name": "invalid.tm markup.underline regex"
				},
				{
					"comment": "The check for all non-json characters is an optmization",
					"match": "\\S[^\\s\"\\[\\]{}:,]*",
					"name": "invalid.tm regex"
				}
			]
		},
		"invalid-brackets-commas": {
			"patterns": [
				{
					"comment": "This could be removed. But I guess erroring the comma is better than the bracket. Not multi-line tho",
					"match": "(,)\\s*(?=[]}])",
					"captures": { "1": { "name": "invalid markup.underline" } }
				},
				{
					"comment": "Why are valid commas handled here?  Because I was lazy...",
					"begin": ",|\\G(?<=[]}\":])(?=[]},\\s])",
					"end": "(?=([]},])|\\S)",
					"beginCaptures": { "0": { "name": "markup.underline" } },
					"endCaptures": {
						"1": {
							"comment": "Capture groups inside look-arounds can apply scope-names; who knew ¯\\_(ツ)_/¯",
							"name": "invalid markup.strikethrough"
						}
					},
					"comment": "\"whitespace\" stops infinite recursion from \"injections\"",
					"contentName": "whitespace"
				}
			]
		},
		"invalid-brackets-commass": {
			"patterns": [
				{
					"comment": "Can you guess the purpose of this?",
					"begins": "(?<=[]}\"]|true|false|null|\\d)(?=[]},\\s])",
					"begin": "(*FAIL)(?!\\G)(?<=[]}\"]|true|false|null|\\d)",
					"end": "(*FAIL)(?=[]},])",
					"contentName": "whitespace",
					"patterns": [ { "include": "#invalid" } ]
				}
			]
		}
	}
}