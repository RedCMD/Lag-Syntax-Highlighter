{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"scopeName": "source.redcmd.syntax.lag",
	"injections": {
		"L:meta.tag.*.*.html": {
			"patterns": [
				{
					"match": ".+",
					"name": "string"
				}
			]
		}
	},
	"patterns": [
		{
			"match": ".+",
			"name": "string"
		},
		{
			"comment": "* matches name scope word",
			"begin": "TextMate",
			"end": "$",
			"name": "meta.tag.some.scope.html"
		},
		{
			"comment": "Scopes must be in order",
			"begin": "Neither",
			"end": "$",
			"name": ".html . meta.tag."
		},
		{
			"comment": "Can have any random scope inbetween",
			"begin": "VSCode",
			"end": "$",
			"name": "meta.tag. random . scope .html"
		}
	]
	
	,
	"injectionss": {
		"sR:source.redcmd.syntax.lag - invalid - string - variable - comment - regex - markup - meta.embedded - whitespace": {
			"comment": "How to inject into everything that doesn't have a scope-name? without having to specify every single scope-name?",
			"patterns": [
				{ "include": "#invalid-brackets-commas" },
				{ "include": "#invalid" }
			]
		},
		"ab": {
			"patterns": [
				{ "include": "#ab" },
				{ "include": "#ab-" },
				{ "include": "#cd" },
				{ "include": "#ef" }
			]
		},
		"L:cd": {
			"patterns": [
				{ "include": "#abs" },
				{ "include": "#cds" },
				{ "include": "#cd-" },
				{ "include": "#efs" }
			]
		}
	},
	"patternss": [
		{
			"matchs": "(?x)   [[:123456789abcdefghijklmnopqrst:]",
			"names": "comment strong regex"
		},
		{ "includes": "#json" },
		{ "include2": "#invalid2" },
		{ "include2": "#ab" },
		{ "include2": "#cd" },
		{ "include2": "#ef" },
		{
			"begin2": "begin",
			"end2": "end",
			"contentName2": "meta.embedded.block.ab",
			"patterns2": [ { "include": "source.redcmd.syntax.ab" } ]
		},
		{
			"match": "[^*]+",
			"name": "$0"
		}
	],
	"repository": {
		"ab": {
			"begin": "{",
			"end": "}",
			"captures": { "0": { "name": "support.type strong" } },
			"contentName": "ab"
		},
		"ab-": {
			"match": "#",
			"name": "support.type strong"
		},
		"cd": {
			"begin": "\\[",
			"end": "]",
			"captures": { "0": { "name": "keyword strong" } },
			"contentName": "cd"
		},
		"cd-": {
			"match": "#",
			"name": "keyword strong"
		},
		"ef": {
			"begin": "\\(",
			"end": "\\)",
			"captures": { "0": { "name": "variable strong" } }
		},
		"test": {
			"match": "(a\\Kax)",
			"name": "keyword.control strong.regex",
			"captures": {
				"1": { "patterns": [ { "include": "#test" } ] }
			}
		},
		"json": {
			"comment": "{ ... }",
			"begin": "^\\s*{",
			"end": "}\\s*$",
			"beginCaptures": { "0": { "name": "markup.underline" } },
			"endCaptures": { "0": { "name": "markup.underline" } },
			"patterns": [
				{
					"begin": "(?=\")",
					"end": ",(?!\\s*[]}])|(?=[]}])",
					"endCaptures": { "0": { "name": "markup.underline" } },
					"patterns": [
						{ "include": "#json-item" }
					]
				}
			]
		},
		"json-item": {
			"comment": "\"...\": ...",
			"begin": "\\G\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
			"end": "\\G(?=([]},]))|(?=[]},])",
			"beginCaptures": { "0": { "name": "variable" } },
			"endCaptures": { "1": { "name": "comment markup.strikethrough" } },
			"patterns": [
				{
					"begin": ":",
					"end": "\\G(?=([]},]))|(?=[]},])",
					"beginCaptures": { "0": { "name": "markup.underline" } },
					"endCaptures": { "1": { "name": "comment markup.strikethrough" } },
					"patterns": [
						{
							"begin": "(?=\"|true|false|null|-?\\d)",
							"end": "(?=[]},])",
							"patterns": [
								{ "include": "#json-dictionarys" },
								{ "include": "#json-arrays" },
								{ "include": "#json-value" }
							]
						}
					]
				}
			]
		},
		"json-dictionary": {
			"comment": "{ ... }",
			"begin": "{",
			"end": "}",
			"beginCaptures": { "0": { "name": "markup.underline" } },
			"endCaptures": { "0": { "name": "markup.underline" } },
			"patterns": [
				{ "include": "#json-item" }
			]
		},
		"json-array": {
			"comment": "[ ... ]",
			"begin": "\\[",
			"end": "]",
			"beginCaptures": { "0": { "name": "markup.underline" } },
			"endCaptures": { "0": { "name": "markup.underline" } },
			"patterns": [
				{ "include": "#json-dictionary" },
				{ "include": "#json-array" },
				{ "include": "#json-value" }
			]
		},
		"json-value": {
			"patterns": [
				{
					"comment": "\"...\"",
					"match": "\\G\"(.*?(?<!\\\\)\\\\{2}*|.*)\"",
					"name": "string.tm",
					"captures": {
						"1": {
							"name": "string.tm",
							"patterns": [
								{
									"match": "\\\\[\"\\\\/bfnrt]",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\u\\h{4}",
									"name": "constant.character.escape.tm"
								},
								{
									"match": "\\\\.?",
									"name": "invalid.tm"
								}
							]
						}
					}
				},
				{
					"match": "\\G(?>true|false|null)",
					"name": "keyword.control.tm"
				},
				{
					"match": "\\G-?\\d+",
					"name": "constant.numeric.tm"
				}
			]
		},
		"invalid": {
			"patterns": [
				{
					"comment": "C styled comments are not allowed: //  /* */ ",
					"match": "/[/*][^]},\"]*",
					"name": "invalid.tm markup.underline regex"
				},
				{
					"comment": "The check for all non-json characters is an optmization",
					"match": "\\S[^\\s\"\\[\\]{}:,]*",
					"name": "invalid.tm regex"
				}
			]
		},
		"invalid-brackets-commas": {
			"patterns": [
				{
					"begin": "(?>(?<=(,))|\\G(?<=[]}\":]))(?=[]},\\s])",
					"end": "((?((?!\\1))(?=([]},]))|(?=([]}]))|,))|(?=\\S)",
					"beginCaptures": { "0": { "name": "markup.underline" } },
					"endCaptures": { "2": { "name": "invalid markup.strikethrough" } },
					"contentName": "whitespace"
				}
			]
		},
		"invalid-brackets-commass": {
			"patterns": [
				{
					"comment": "Can you guess the purpose of this?",
					"begins": "(?<=[]}\"]|true|false|null|\\d)(?=[]},\\s])",
					"begin": "(*FAIL)(?!\\G)(?<=[]}\"]|true|false|null|\\d)",
					"end": "(*FAIL)(?=[]},])",
					"contentName": "whitespace",
					"patterns": [ { "include": "#invalid" } ]
				}
			]
		}
	}
}